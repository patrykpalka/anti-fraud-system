package antifraud.service;

import antifraud.dto.request.UserRegistrationRequestDTO;
import antifraud.dto.request.UserRoleRequestDTO;
import antifraud.dto.request.UserStatusRequestDTO;
import antifraud.dto.response.OperationResponseDTO;
import antifraud.dto.response.UserDeletionResponseDTO;
import antifraud.dto.response.UserResponseDTO;
import antifraud.exception.BadRequestException;
import antifraud.exception.ConflictException;
import antifraud.exception.NotFoundException;
import antifraud.model.AppUser;
import antifraud.model.Role;
import antifraud.repo.AppUserRepo;
import antifraud.repo.RoleRepo;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class UserServiceTest {

    @Mock
    private AppUserRepo appUserRepo;

    @Mock
    private RoleRepo roleRepo;

    @Mock
    private AppUserService appUserService;

    @InjectMocks
    private UserService userService;

    private UserRegistrationRequestDTO registrationDTO;
    private UserRoleRequestDTO roleRequestDTO;
    private UserStatusRequestDTO statusRequestDTO;
    private AppUser user;
    private Role role;

    @BeforeEach
    void setUp() {
        initTestData();
    }

    private void initTestData() {
        // Initialize registration data
        registrationDTO = new UserRegistrationRequestDTO();
        registrationDTO.setUsername("testuser");
        registrationDTO.setName("Test User");
        registrationDTO.setPassword("password");

        // Initialize user and role
        user = new AppUser("Test User", "testuser", "encodedPassword");
        role = new Role();
        role.setName("ROLE_MERCHANT");
        user.getRoles().add(role);

        // Initialize role change request
        roleRequestDTO = new UserRoleRequestDTO();
        roleRequestDTO.setUsername("testuser");
        roleRequestDTO.setRole("MERCHANT");

        // Initialize status change request
        statusRequestDTO = new UserStatusRequestDTO();
        statusRequestDTO.setUsername("testuser");
        statusRequestDTO.setOperation("LOCK");
    }

    @Test
    void shouldRegisterUserSuccessfully() {
        // Arrange
        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.empty());
        when(appUserService.register(registrationDTO)).thenReturn(user);

        // Act
        ResponseEntity<UserResponseDTO> response = userService.registerUser(registrationDTO);

        // Assert
        assertNotNull(response.getBody(), "Response body should not be null.");
        assertEquals(201, response.getStatusCode().get, "Status code should be 201 Created.");
        assertEquals("testuser", response.getBody().getUsername(), "Username should match the input.");
        assertEquals("MERCHANT", response.getBody().getRole(), "Role should match the expected value.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
        verify(appUserService, times(1)).register(registrationDTO);
    }

    @Test
    @DisplayName("Should throw ConflictException when registering an existing user")
    void shouldThrowConflictExceptionWhenRegisteringExistingUser() {
        // Arrange
        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.of(new AppUser()));

        // Act & Assert
        assertThrows(ConflictException.class, () -> userService.registerUser(registrationDTO),
                "Expected ConflictException when the user already exists.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
    }

    @Test
    @DisplayName("Should return all users successfully")
    void shouldReturnAllUsersSuccessfully() {
        // Arrange
        List<AppUser> mockUsers = new ArrayList<>();
        AppUser user1 = new AppUser("Test User", "testuser", "password");
        Role role1 = new Role();
        role1.setName("ROLE_MERCHANT");
        user1.getRoles().add(role1);

        AppUser user2 = new AppUser("Another User", "anotheruser", "password");
        Role role2 = new Role();
        role2.setName("ROLE_ADMINISTRATOR");
        user2.getRoles().add(role2);

        mockUsers.add(user1);
        mockUsers.add(user2);

        when(appUserRepo.findAllByOrderByIdAsc()).thenReturn(mockUsers);

        // Act
        ResponseEntity<List<UserResponseDTO>> response = userService.getAllUsers();

        // Assert
        assertNotNull(response.getBody(), "Response body should not be null.");
        assertEquals(200, response.getStatusCodeValue(), "Status code should be 200 OK.");
        assertEquals(2, response.getBody().size(), "Response should contain 2 users.");
        assertEquals("testuser", response.getBody().get(0).getUsername(), "First user's username should be 'testuser'.");
        assertEquals("MERCHANT", response.getBody().get(0).getRole(), "First user's role should be 'MERCHANT'.");

        verify(appUserRepo, times(1)).findAllByOrderByIdAsc();
    }

    @Test
    @DisplayName("Should delete user successfully")
    void shouldDeleteUserSuccessfully() {
        // Arrange
        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.of(user));

        // Act
        ResponseEntity<UserDeletionResponseDTO> response = userService.deleteUser("testuser");

        // Assert
        assertEquals(200, response.getStatusCodeValue(), "Status code should be 200 OK.");
        assertEquals("Deleted successfully!", response.getBody().getStatus(), "Status message should indicate successful deletion.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
        verify(appUserRepo, times(1)).delete(user);
    }

    @Test
    @DisplayName("Should throw NotFoundException when deleting a non-existing user")
    void shouldThrowNotFoundExceptionWhenDeletingNonExistentUser() {
        // Arrange
        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(NotFoundException.class, () -> userService.deleteUser("testuser"),
                "Expected NotFoundException when user is not found.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
    }

    @Test
    @DisplayName("Should change user role successfully")
    void shouldChangeRoleSuccessfully() {
        // Arrange
        AppUser mockUser = new AppUser("Test User", "testuser", "password");
        Role mockRole = new Role();
        mockRole.setName("ROLE_ADMINISTRATOR");
        mockUser.setRoles(Set.of(mockRole));

        Role newRole = new Role();
        newRole.setName("ROLE_MERCHANT");

        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.of(mockUser));
        when(roleRepo.findByName("ROLE_MERCHANT")).thenReturn(Optional.of(newRole));

        // Act
        ResponseEntity<UserResponseDTO> response = userService.changeRole(roleRequestDTO);

        // Assert
        assertEquals(200, response.getStatusCodeValue(), "Status code should be 200 OK.");
        assertEquals("MERCHANT", response.getBody().getRole(), "Updated role should be 'MERCHANT'.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
        verify(roleRepo, times(1)).findByName("ROLE_MERCHANT");
    }

    @Test
    @DisplayName("Should change lock status successfully")
    void shouldChangeLockStatusSuccessfully() {
        // Arrange
        AppUser mockUser = new AppUser("Test User", "testuser", "password");
        mockUser.setLocked(false);

        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.of(mockUser));

        // Act
        ResponseEntity<OperationResponseDTO> response = userService.changeLockedStatus(statusRequestDTO);

        // Assert
        assertEquals(200, response.getStatusCodeValue(), "Status code should be 200 OK.");
        assertTrue(response.getBody().getStatus().contains("locked"), "Status should indicate 'locked'.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
        verify(appUserRepo, times(1)).save(mockUser);
    }

    @Test
    void testChangeLockStatusBadRequest() {
        AppUser mockUser = new AppUser("Admin User", "admin", "password");
        mockUser.setRoles(Set.of(new Role("ROLE_ADMINISTRATOR")));

        UserStatusRequestDTO statusRequest = new UserStatusRequestDTO();
        statusRequest.setUsername("admin");
        statusRequest.setOperation("LOCK");

        when(appUserRepo.findByUsername("admin")).thenReturn(Optional.of(mockUser));

        assertThrows(BadRequestException.class, () -> userService.changeLockedStatus(statusRequest));
        verify(appUserRepo, times(1)).findByUsername("admin");
    }

    @Test
    @DisplayName("Should throw BadRequestException for invalid role change")
    void shouldThrowBadRequestExceptionForInvalidRoleChange() {
        // Arrange
        UserRoleRequestDTO invalidRoleRequestDTO = new UserRoleRequestDTO();
        invalidRoleRequestDTO.setUsername("testuser");
        invalidRoleRequestDTO.setRole("INVALID_ROLE");

        // Act & Assert
        assertThrows(BadRequestException.class, () -> userService.changeRole(invalidRoleRequestDTO),
                "Expected BadRequestException when changing to an invalid role.");
    }

    @Test
    @DisplayName("Should throw ConflictException for role change to current role")
    void shouldThrowConflictExceptionForRoleChangeToCurrentRole() {
        // Arrange
        UserRoleRequestDTO roleRequestDTO = new UserRoleRequestDTO();
        roleRequestDTO.setUsername("testuser");
        roleRequestDTO.setRole("MERCHANT");

        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.of(user));

        // Act & Assert
        assertThrows(ConflictException.class, () -> userService.changeRole(roleRequestDTO),
                "Expected ConflictException when changing to the same role.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
        verify(roleRepo, times(0)).findByName("ROLE_MERCHANT");
    }

    @Test
    @DisplayName("Should return 400 when user is already locked")
    void shouldReturnBadRequestWhenUserIsAlreadyLocked() {
        // Arrange
        UserStatusRequestDTO statusRequestDTO = new UserStatusRequestDTO();
        statusRequestDTO.setUsername("testuser");
        statusRequestDTO.setOperation("LOCK");

        AppUser mockUser = new AppUser("Test User", "testuser", "password");
        mockUser.setLocked(true);

        when(appUserRepo.findByUsername("testuser")).thenReturn(Optional.of(mockUser));

        // Act
        ResponseEntity<OperationResponseDTO> response = userService.changeLockedStatus(statusRequestDTO);

        // Assert
        assertEquals(400, response.getStatusCodeValue(), "Expected 400 Bad Request for already locked user.");
        verify(appUserRepo, times(1)).findByUsername("testuser");
    }
}
