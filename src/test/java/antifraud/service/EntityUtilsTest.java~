package antifraud.service;

import antifraud.dto.request.StolenCardRequestDTO;
import antifraud.dto.request.SuspiciousIpRequestDTO;
import antifraud.dto.response.AntiFraudDeletionResponseDTO;
import antifraud.exception.BadRequestException;
import antifraud.exception.ConflictException;
import antifraud.exception.NotFoundException;
import antifraud.model.RemovableEntity;
import antifraud.model.SuspiciousIp;
import antifraud.service.utils.EntityUtils;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;

import java.util.Optional;
import java.util.function.Consumer;
import java.util.function.Function;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class EntityUtilsTest {

    @Test
    void shouldAddEntitySuccessfully() {
        // Given
        String field = "192.168.1.1";
        SuspiciousIpRequestDTO requestDTO = new SuspiciousIpRequestDTO();
        requestDTO.setIp(field);
        SuspiciousIp entity = new SuspiciousIp(field);

        Function<SuspiciousIpRequestDTO, SuspiciousIp> toEntity = dto -> new SuspiciousIp(dto.getIp());
        Function<String, Optional<SuspiciousIp>> findEntityByField = (ip) -> Optional.empty();
        Consumer<SuspiciousIp> saveEntity = entityToSave -> {};
        String entityType = "IP address";

        // When
        ResponseEntity<SuspiciousIp> response = EntityUtils.addEntity(requestDTO, toEntity, findEntityByField, saveEntity, entityType);

        // Then
        assertNotNull(response);
        assertEquals(field, response.getBody().getIp());
        verify(findEntityByField, times(1)).apply(field);
        verify(saveEntity, times(1)).accept(entity);
    }

    @Test
    void shouldThrowConflictExceptionWhenEntityAlreadyExists() {
        // Given
        String field = "192.168.1.1";
        SuspiciousIpRequestDTO requestDTO = new SuspiciousIpRequestDTO();
        requestDTO.setIp(field);

        Function<SuspiciousIpRequestDTO, SuspiciousIp> toEntity = dto -> new SuspiciousIp(dto.getIp());
        Function<String, Optional<SuspiciousIp>> findEntityByField = (ip) -> Optional.of(new SuspiciousIp(ip));
        Consumer<SuspiciousIp> saveEntity = entityToSave -> {};
        String entityType = "IP address";

        // When & Then
        ConflictException exception = assertThrows(ConflictException.class, () -> {
            EntityUtils.addEntity(requestDTO, toEntity, findEntityByField, saveEntity, entityType);
        });
        assertEquals("This IP address is already in use", exception.getMessage());
        verify(findEntityByField, times(1)).apply(field);
        verify(saveEntity, times(0)).accept(any());
    }

    @Test
    void shouldThrowIllegalArgumentExceptionWhenUnsupportedDTOType() {
        // Given
        Object requestDTO = new Object(); // Invalid DTO type
        Function<Object, Object> toEntity = dto -> new Object();
        Function<String, Optional<Object>> findEntityByField = (field) -> Optional.empty();
        Consumer<Object> saveEntity = entity -> {};
        String entityType = "unsupported type";

        // When & Then
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            EntityUtils.addEntity(requestDTO, toEntity, findEntityByField, saveEntity, entityType);
        });
        assertEquals("Unsupported DTO type", exception.getMessage());
    }

    @Test
    void shouldRemoveEntitySuccessfully() {
        // Given
        String ip = "192.168.1.1";
        SuspiciousIp entity = new SuspiciousIp(ip);
        Function<String, Optional<SuspiciousIp>> findEntityByField = (field) -> Optional.of(entity);
        Consumer<SuspiciousIp> deleteEntity = e -> {};
        String entityType = "IP address";

        // When
        ResponseEntity<AntiFraudDeletionResponseDTO<SuspiciousIp>> response =
                EntityUtils.removeEntity(ip, findEntityByField, deleteEntity, entityType);

        // Then
        assertNotNull(response);
        assertNotNull(response.getBody());
        assertEquals("IP " + ip + " successfully removed!", response.getBody().getStatus());
        verify(findEntityByField, times(1)).apply(ip);
        verify(deleteEntity, times(1)).accept(entity);
    }

    @Test
    void shouldThrowNotFoundExceptionWhenEntityDoesNotExist() {
        // Given
        String ip = "192.168.1.1";
        Function<String, Optional<SuspiciousIp>> findEntityByField = (field) -> Optional.empty();
        Consumer<SuspiciousIp> deleteEntity = e -> {};
        String entityType = "IP address";

        // When & Then
        NotFoundException exception = assertThrows(NotFoundException.class, () ->
                EntityUtils.removeEntity(ip, findEntityByField, deleteEntity, entityType)
        );
        assertEquals("The specified IP address (192.168.1.1) was not found.", exception.getMessage());
        verify(findEntityByField, times(1)).apply(ip);
        verify(deleteEntity, times(0)).accept(any());
    }
}
